{"ast":null,"code":"// import { createSlice } from \"@reduxjs/toolkit\";\n\n// const cartSlice = createSlice({\n//   name: 'cart',\n//   initialState: {\n//     items: [],\n//     totalQuantity: 0,\n//     totalAmount: 0,\n//   },\n//   reducers: {\n//     addItemToCart(state, action) {\n//       const newItem = action.payload;\n//       const existingItem = state.items.find(item => item.id === newItem.id);\n//       state.totalQuantity++;\n//       if(!existingItem) {\n//         state.items.push({\n//           id: newItem.id, \n//           price: newItem.price, \n//           quantity: 1,\n//           totalPrice: newItem.price, \n//           name: newItem.title});\n\n//       }\n//       else{\n//         existingItem.quantity++;\n//         existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n//       }\n//       console.log(state.items);\n//     },\n//     removeItemFromCart(state, action) {\n//       const id = action.payload;\n//       const existingItem = state.items.find(item => item.id === id);\n//       state.totalQuantity--;\n\n//       if(existingItem.quantity === 1) {\n//         state.items = state.items.filter(item => item.id !== id);\n//       }\n//       else {\n//         existingItem.quantity--;\n//         existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n//       }\n//     }\n\n//   }\n// });\n\n// export const CartActions = cartSlice.actions;\n\n// export default cartSlice;","map":{"version":3,"names":[],"sources":["E:/webdev practice/some react projects/Redux/3.Shop-app/src/store/cart-slice.js"],"sourcesContent":["// import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// const cartSlice = createSlice({\r\n//   name: 'cart',\r\n//   initialState: {\r\n//     items: [],\r\n//     totalQuantity: 0,\r\n//     totalAmount: 0,\r\n//   },\r\n//   reducers: {\r\n//     addItemToCart(state, action) {\r\n//       const newItem = action.payload;\r\n//       const existingItem = state.items.find(item => item.id === newItem.id);\r\n//       state.totalQuantity++;\r\n//       if(!existingItem) {\r\n//         state.items.push({\r\n//           id: newItem.id, \r\n//           price: newItem.price, \r\n//           quantity: 1,\r\n//           totalPrice: newItem.price, \r\n//           name: newItem.title});\r\n\r\n//       }\r\n//       else{\r\n//         existingItem.quantity++;\r\n//         existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n//       }\r\n//       console.log(state.items);\r\n//     },\r\n//     removeItemFromCart(state, action) {\r\n//       const id = action.payload;\r\n//       const existingItem = state.items.find(item => item.id === id);\r\n//       state.totalQuantity--;\r\n\r\n//       if(existingItem.quantity === 1) {\r\n//         state.items = state.items.filter(item => item.id !== id);\r\n//       }\r\n//       else {\r\n//         existingItem.quantity--;\r\n//         existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n//       }\r\n//     }\r\n\r\n//   }\r\n// });\r\n\r\n// export const CartActions = cartSlice.actions;\r\n\r\n// export default cartSlice;\r\n\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}